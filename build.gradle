apply from: 'versions.gradle'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

buildscript {
	repositories {
		maven {
			name 'Maven Repository'
			url "${repositoryMavenUrl}"
			credentials {
				username "${repositoryUsername}"
				password "${repositoryPassword}"
			}
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.18.RELEASE"
		classpath "io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE"
	}
}

// 时间戳：年月日时分
ext.Timestamp = new Date().format('yyyyMMddHHmm')
// Build Number
// Build Number
ext.BuildNumber = System.env.BUILD_NUMBER
if (ext.BuildNumber == null || "" == ext.BuildNumber) {
	ext.BuildNumber = 'x'
}

ext.version = '1.0.0'

group = 'com.my.agents'
if ('true' == System.env.releaseVersion) {
	version = ext.version
} else {
	version = ext.version + '-SNAPSHOT'
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
	}
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

jar.doFirst {
	manifest {
		def manifestFile = "${projectDir}/META-INF/MANIFEST.MF"
		if (new File(manifestFile).exists())
			from (manifestFile)

		attributes 'Implementation-Title':name
		attributes 'Implementation-Version': version + '.' + project.ext.BuildNumber
		attributes 'Implementation-BuildDateTime':new Date()
	}
}

afterEvaluate {Project  project ->
	if (project.pluginManager.hasPlugin('java')) {
		configurations.all {
			resolutionStrategy {
				// cache dynamic versions for 10 minutes
				cacheDynamicVersionsFor 10*60, 'seconds'
				// don't cache changing modules at all
				cacheChangingModulesFor 0, 'seconds'
			}

			exclude module:'slf4j-log4j12'
			exclude module:'slf4j-ext'
			exclude module:'log4j'
		}

		dependencies { testCompile 'junit:junit:4.12'  }
	}
}

repositories {
	maven {
		name 'Aliyun Maven Repository'
		url "http://maven.aliyun.com/nexus/content/groups/public/"
	}

	maven {
		name 'Maven Repository'
		url "${repositoryMavenUrl}"
		credentials {
			username "${repositoryUsername}"
			password "${repositoryPassword}"
		}
	}

	ivy {
		name 'Ivy Repository'
		url "${repositoryIvyUrl}"
		credentials {
			username "${repositoryUsername}"
			password "${repositoryPassword}"
		}
		patternLayout {
			artifact '[organisation]/[module]/[revision]/[type]s/[artifact]-[revision].[ext]'
			ivy '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
			m2compatible = true
		}
	}
}

springBoot {
	executable = true
	mainClass = 'com.my.agents.AgentBooter'
}

task zipSources(type: Zip) {
	description '压缩源代码'
	if ('true' == System.env.releaseVersion) {
		project.ext.zipSourcesFile = project.name + '-' + project.ext.version + '.' + project.ext.BuildNumber + '-sources.zip'
	} else {
		project.ext.zipSourcesFile = project.name + '-' + project.ext.version + '.' + project.ext.BuildNumber + '-SNAPSHOT-sources.zip'
	}
	archiveName = project.ext.zipSourcesFile
	includeEmptyDirs = false

	from project.projectDir

	exclude '**/.*'
	exclude 'build/*'
	exclude 'bin/*'
	exclude 'logs/*'
}

task zipSetup(type: Zip) {
	description '制作安装包'
	if ('true' == System.env.releaseVersion) {
		project.ext.zipSetupFile = project.name + '-' + project.ext.version + '.' + project.ext.BuildNumber + '-setup.zip'
	} else {
		project.ext.zipSetupFile = project.name + '-' + project.ext.version + '.' + project.ext.BuildNumber + '-SNAPSHOT-setup.zip'
	}
	archiveName = project.ext.zipSetupFile

	// Fat jar
	from ("${buildDir}/libs/" + project.name + '-' + project.version + '.jar')

	// Configs
	from ("${projectDir}/config/examples") { into '/config' }

	// Windows start script
	from ("${projectDir}/" + project.name + '.bat') 

	// Unix conf script
	from ("${projectDir}/" + project.name + '.conf') {
		rename project.name, project.name + '-' + project.version
	}

	// from "${projectDir}/release.txt"
}

import java.security.MessageDigest

def generateMD5(final file) {
	MessageDigest digest = MessageDigest.getInstance("MD5")
	file.withInputStream(){is->
		byte[] buffer = new byte[8192]
		int read = 0
		while( (read = is.read(buffer)) > 0) {
			digest.update(buffer, 0, read)
		}
	}
	byte[] md5sum = digest.digest()
	BigInteger bigInt = new BigInteger(1, md5sum)
	return bigInt.toString(16).padLeft(32, '0')
}

task md5(dependsOn: [zipSetup, zipSources]) {
	doLast {
		String md5_setup = generateMD5(file("${projectDir}/build/distributions/" + project.ext.zipSetupFile))
		String md5_sources = generateMD5(file("${projectDir}/build/distributions/" + project.ext.zipSourcesFile))
		println project.ext.zipSetupFile + '=' + md5_setup
		println project.ext.zipSourcesFile + '=' + md5_sources

		def newFile
		if ('true' == System.env.releaseVersion) {
			newFile = new File("${projectDir}/build/distributions/"
					+ project.name + '-' + project.ext.version + '.' + project.ext.BuildNumber + '-md5.txt')

		} else {
			newFile = new File("${projectDir}/build/distributions/"
					+ project.name + '-' + project.ext.version + '.' + project.ext.BuildNumber + '-SNAPSHOT-md5.txt')
		}
		PrintWriter printWriter = newFile.newPrintWriter()
		printWriter.println project.ext.zipSetupFile + '=' + md5_setup
		printWriter.println project.ext.zipSourcesFile + '=' + md5_sources
		printWriter.flush()
		printWriter.close()
	}
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-web:${verSpringBoot}"
	compileOnly "org.springframework.boot:spring-boot-starter-thymeleaf:${verSpringBoot}"
	// Spring
	compileOnly "org.springframework:spring-webmvc:${verSpringFramework}"
	
	// Swagger2
	compile "io.github.swagger2markup:swagger2markup:${verSwager2markup}"
	compile "io.springfox:springfox-swagger2:${verSpringfox}"
	compile "io.springfox:springfox-swagger-ui:${verSpringfox}"
	// Groovy
	compile "org.springframework.integration:spring-integration-groovy:${verSpringIntegration}"
	compile "org.codehaus.groovy:groovy:${verGroovy}"
	// Dubbo X
	compile "com.alibaba:dubbo:${verDubbo}"
	compile "com.101tec:zkclient:${ver101tecZkclient}"
	compile "com.esotericsoftware:kryo:${verKryo}"
	compile "de.javakaffee:kryo-serializers:${verKryoSerializers}"
	// jms & activemq
	compile "org.springframework:spring-jms:${verSpringFramework}"
	compile "org.apache.activemq:activemq-client:${verActivemq}"
	compile "org.apache.activemq:activemq-pool:${verActivemq}"
	compile "org.apache.activemq:activemq-jms-pool:${verActivemq}"
	//
	compile 'io.netty:netty-common:4.0.17.Final'
	compile 'net.sf.json-lib:json-lib-ext-spring:1.0'
	//ftp
	// https://mvnrepository.com/artifact/commons-net/commons-net
	compile group: 'commons-net', name: 'commons-net', version: '3.3'
	compile 'org.jdom:jdom:1.1.3'
}

build.dependsOn md5